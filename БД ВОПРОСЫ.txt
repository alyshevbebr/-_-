1) Основные понятия базы данных: база данных, ИС, вычислительная система, банк данных, СУБД, словарь данных.

1. **База данных (БД)**: Организованная коллекция данных, хранящаяся и управляемая с помощью СУБД.
2. **Информационная система (ИС)**: Система для сбора, обработки и распространения информации.
3. **Вычислительная система**: Аппаратные и программные средства для выполнения вычислительных задач.
4. **Банк данных**: Совокупность нескольких баз данных и систем управления ими.
5. **Система управления базами данных (СУБД)**: Программное обеспечение для создания и управления базами данных.
6. **Словарь данных**: Описание элементов данных, их типов и взаимосвязей в базе данных.

2) Перечислите и охарактеризуйте функции СУБД.

1. **Создание и управление БД**: Позволяет создавать и управлять структурами баз данных.
2. **Хранение данных**: Обеспечивает надежное хранение данных.
3. **Манипуляция данными**: Выполнение операций CRUD (создание, чтение, обновление, удаление).
4. **Обеспечение целостности данных**: Поддержка правил целостности и проверок.
5. **Управление доступом и безопасностью**: Контроль доступа пользователей и защита данных.
6. **Обработка запросов**: Предоставление языка запросов (например, SQL).
7. **Резервное копирование и восстановление**: Создание резервных копий и восстановление данных.
8. **Управление транзакциями**: Поддержка ACID-свойств для операций с данными.
9. **Оптимизация производительности**: Инструменты для улучшения производительности запросов.
10. **Поддержка многопользовательского доступа**: Обеспечение одновременной работы нескольких пользователей.


3) Опишите процесс функционирования информационной системы с сервером баз данных.

1. **Запрос пользователя**: Пользователь инициирует запрос через клиентское приложение.
2. **Передача запроса**: Клиентское приложение отправляет запрос на сервер баз данных.
3. **Обработка запроса**: Сервер анализирует запрос и определяет необходимые операции.
4. **Выполнение операций**: Сервер выполняет операции с данными, используя язык запросов.
5. **Доступ к данным**: Сервер обращается к хранилищу данных для извлечения или изменения информации.
6. **Формирование ответа**: Сервер формирует ответ на запрос.
7. **Передача ответа**: Сервер отправляет ответ обратно клиентскому приложению.
8. **Отображение результата**: Клиентское приложение отображает результаты пользователю.
9. **Логирование и мониторинг**: Сервер ведет журнал операций и мониторит производительность.

4) Опишите реляционную модель данных.

Реляционная модель данных — это способ организации данных в виде таблиц, где:

1. **Таблицы**: Данные хранятся в таблицах, состоящих из строк и столбцов.
2. **Строки и столбцы**: Каждая строка представляет запись, а каждый столбец — атрибут.
3. **Первичный ключ**: Уникальный идентификатор для каждой записи.
4. **Внешний ключ**: Поле, ссылающееся на первичный ключ другой таблицы.
5. **Связи**: Таблицы могут быть связаны между собой.
6. **Язык запросов**: Используется SQL для взаимодействия с данными.
7. **Целостность данных**: Поддержка правил целостности.
8. **Нормализация**: Процесс минимизации избыточности данных.


5) Опишите элементы реляционной модели БД: отношение, кортеж, атрибут, домен, значение атрибута, схема отношения, первичный ключ. Перечислите свойства отношений.

**Элементы реляционной модели:**

1. **Отношение**: Таблица, состоящая из строк и столбцов.
2. **Кортеж**: Строка в таблице, представляющая запись.
3. **Атрибут**: Столбец в таблице, представляющий характеристику.
4. **Домен**: Множество допустимых значений для атрибута.
5. **Значение атрибута** : Конкретное значение в кортеже.
6. **Схема отношения**: Описание структуры таблицы (имена атрибутов и их типы).
7. **Первичный ключ**: Уникальный идентификатор для кортежа.
**Свойства отношений:**
1. Уникальность: Каждая строка уникальна.
2. Неупорядоченность: Порядок строк и столбцов не важен.
3. Однородность: Все значения в атрибуте одного типа.
4. Атомарность: Значения атрибутов неделимы.
5. Целостность: Поддержка правил целостности данных.

6) Перечислите и охарактеризуйте виды связей между отношениями. Приведите примеры.

1. **Связь "один к одному" (1:1)**: Каждая запись в одной таблице соответствует ровно одной записи в другой таблице.
   - *Пример*: Таблицы "Пользователь" и "Профиль", где каждый пользователь имеет один профиль.

2. **Связь "один ко многим" (1:N)**: Каждая запись в одной таблице может соответствовать нескольким записям в другой таблице, но каждая запись во второй таблице соответствует только одной записи в первой.
   - *Пример*: Таблицы "Автор" и "Книга", где один автор может написать несколько книг.

3. **Связь "многие ко многим" (M:N)**: Записи в одной таблице могут соответствовать нескольким записям в другой таблице, и наоборот. Для реализации такой связи обычно создается промежуточная таблица.
   - *Пример*: Таблицы "Студент" и "Курс", где один студент может записаться на несколько курсов, а один курс может включать нескольких студентов. Промежуточная таблица "Запись" связывает студентов и курсы.

7) Сравните понятия потенциальный, первичный и внешний ключ.

1. **Потенциальный ключ**: "Набор атрибутов, который может быть использован для уникальной идентификации записей в таблице. Может состоять из одного или нескольких атрибутов."

2. **Первичный ключ**: "Выбранный из потенциальных ключей атрибут (или комбинация атрибутов), который уникально идентифицирует каждую запись в таблице. Не может содержать NULL-значения."

3. **Внешний ключ**: "Атрибут (или комбинация атрибутов) в одной таблице, который ссылается на первичный ключ другой таблицы, устанавливая связь между ними."

8) Опишите процесс приведения БД к 1НФ.

"Процесс приведения базы данных к первой нормальной форме (1НФ) включает следующие шаги:
1. Удаление повторяющихся групп: Каждая таблица должна содержать только атомарные значения, без повторяющихся групп данных.
2. Уникальность строк: Каждая строка должна быть уникальной, что достигается добавлением первичного ключа.
3. Приведение всех значений атрибутов к единому типу: Все значения в одном столбце должны быть одного типа данных."

9) Опишите процесс приведения БД к 2НФ.

"Процесс приведения базы данных ко второй нормальной форме (2НФ) включает следующие шаги:
1. Приведение к 1НФ: Сначала база данных должна быть приведена к первой нормальной форме.
2. Устранение частичных зависимостей: Все не ключевые атрибуты должны зависеть от всего первичного ключа, а не только от его части. Если есть частичные зависимости, необходимо создать новые таблицы."

10) Опишите процесс приведения БД к 3НФ.

"Процесс приведения базы данных к третьей нормальной форме (3НФ) включает следующие шаги:
1. Приведение к 2НФ: Сначала база данных должна быть приведена ко второй нормальной форме.
2. Устранение транзитивных зависимостей: Все не ключевые атрибуты должны зависеть только от первичного ключа, а не от других неключевых атрибутов. Если есть транзитивные зависимости, необходимо создать новые таблицы."


11) Опишите понятия: сущность, атрибут, связь. Охарактеризуйте процесс преобразования ER-модели в реляционную БД.

1. **Сущность**: "Объект или концепция, представляющая интерес для организации, например, 'Клиент' или 'Заказ'."
2. **Атрибут**: "Характеристика или свойство сущности, например, 'Имя' или 'Дата заказа'."
3. **Связь**: "Отношение между сущностями, например, связь между 'Клиентом' и 'Заказом'."

"Процесс преобразования ER-модели в реляционную БД включает следующие шаги:
1. Каждая сущность становится таблицей.
2. Атрибуты сущности становятся столбцами таблицы.
3. Связи между сущностями реализуются через первичные и внешние ключи."

12) Язык SQL. Инструкции SQL.

"SQL (Structured Query Language) — это язык для работы с реляционными базами данных. Основные инструкции SQL включают:
1. **SELECT**: "Извлечение данных из таблицы."
2. **INSERT**: "Добавление новых записей в таблицу."
3. **UPDATE**: "Изменение существующих записей в таблице."
4. **DELETE**: "Удаление записей из таблицы."
5. **CREATE**: "Создание новых таблиц или других объектов базы данных."
6. **ALTER**: "Изменение структуры существующих таблиц."
7. **DROP**: "Удаление таблиц или других объектов базы данных."

13) Опишите понятия: сущность, атрибут, связь. Охарактеризуйте процесс преобразования ER-модели в реляционную БД.

1. **Сущность**: "Объект или концепция, представляющая интерес для организации, например, 'Клиент' или 'Заказ'."
2. **Атрибут**: "Характеристика или свойство сущности, например, 'Имя' или 'Дата заказа'."
3. **Связь**: "Отношение между сущностями, например, связь между 'Клиентом' и 'Заказом'."

"Процесс преобразования ER-модели в реляционную БД включает следующие шаги:
1. Каждая сущность становится таблицей.
2. Атрибуты сущности становятся столбцами таблицы.
3. Связи между сущностями реализуются через первичные и внешние ключи."


14) Язык SQL. Типы данных в SQL.

"Типы данных в SQL определяют, какие значения могут храниться в столбцах таблиц. Основные типы данных включают:
1. **CHAR**: "Фиксированная длина строковых данных."
2. **VARCHAR**: "Переменная длина строковых данных."
3. **INT**: "Целочисленные данные."
4. **FLOAT**: "Числа с плавающей запятой."
5. **DATE**: "Даты."
6. **BOOLEAN**: "Логические значения (TRUE/FALSE)."


15) Язык SQL. Функции языка SQL.

"Функции языка SQL позволяют выполнять различные операции над данными. Основные функции включают:
1. **Агрегатные функции**: "Функции, которые выполняют вычисления над множеством значений и возвращают одно значение. Примеры: COUNT(), SUM(), AVG()."
2. **Строковые функции**: "Функции для работы со строками. Примеры: CONCAT(), SUBSTRING(), LENGTH()."
3. **Числовые функции**: "Функции для работы с числами. Примеры: ROUND(), CEIL(), FLOOR()."
4. **Дата и время функции**: "Функции для работы с датами и временем. Примеры: NOW(), DATEADD(), DATEDIFF()."



16) Язык SQL. Задание условий отбора в предложении WHERE.

"В предложении WHERE задаются условия для фильтрации записей, которые должны быть возвращены в результате запроса. Условия могут включать операторы сравнения (например, =, <, >), логические операторы (AND, OR, NOT) и другие. Пример: 
SELECT * FROM Клиенты WHERE Возраст > 18 AND Город = 'Москва';"

17) Язык SQL. Конструкция SELECT.

"Конструкция SELECT используется для извлечения данных из одной или нескольких таблиц. Основные элементы конструкции:
1. **SELECT**: Указывает, какие столбцы нужно выбрать.
2. **FROM**: Указывает таблицы, из которых будут извлекаться данные.
3. **WHERE**: (опционально) Указывает условия отбора.
4. **ORDER BY**: (опционально) Указывает порядок сортировки результатов.
Пример: 
SELECT Имя, Возраст FROM Клиенты WHERE Город = 'Москва' ORDER BY Возраст;"

18) Язык SQL. Предложения WHERE и HAVING.

"Предложение WHERE используется для фильтрации строк до выполнения агрегатных функций, тогда как HAVING используется для фильтрации результатов после применения агрегатных функций. Пример:
SELECT Город, COUNT(*) FROM Клиенты GROUP BY Город HAVING COUNT(*) > 10;"

19) Типы данных языка SQL, определенные стандартом.

"Типы данных в SQL, определенные стандартом, включают:
1. **CHAR**: Фиксированная длина строковых данных.
2. **VARCHAR**: Переменная длина строковых данных.
3. **INT**: Целочисленные данные.
4. **FLOAT**: Числа с плавающей запятой.
5. **DATE**: Даты.
6. **BOOLEAN**: Логические значения (TRUE/FALSE).
7. **DECIMAL**: Числа с фиксированной точностью."

20) Модель данных: понятие, примеры, типы, схемы.

"Модель данных — это абстракция, описывающая структуру и взаимосвязи данных. Примеры моделей данных:
1. **Реляционная модель**: Данные организованы в таблицы (отношения).
2. **Иерархическая модель**: Данные организованы в древовидную структуру.
3. **Сетевая модель**: Данные организованы в граф, где записи могут иметь несколько связей.
4. **Объектно-ориентированная модель**: Данные представлены в виде объектов, как в объектно-ориентированном программировании."

21) Связи в моделях данных: типы, схемы, примеры.

"Связи в моделях данных описывают, как данные в одной таблице связаны с данными в другой. Основные типы связей:
1. **Один к одному (1:1)**: Каждая запись в одной таблице соответствует одной записи в другой. Пример: 'Пользователь' и 'Профиль'.
2. **Один ко многим (1:N)**: Каждая запись в одной таблице может соответствовать нескольким записям в другой. Пример: 'Автор' и 'Книга'.
3. **Многие ко многим (M:N)**: Записи в одной таблице могут соответствовать нескольким записям в другой и наоборот. Пример: 'Студент' и 'Курс' с промежуточной таблицей 'Запись'."

22) Сущность: понятие, типы, источники информации о сущностях.

"Сущность — это объект или концепция, представляющая интерес для организации, которая может быть описана с помощью атрибутов. Типы сущностей:
1. **Физические сущности**: Конкретные объекты, например, 'Автомобиль' или 'Сотрудник'.
2. **Абстрактные сущности**: Концепции или идеи, например, 'Заказ' или 'Контракт'.
Источники информации о сущностях могут включать:
1. **Документы**: Описание процессов и объектов.
2. **Базы данных**: Существующие записи и структуры.
3. **Интервью**: Общение с пользователями и экспертами."

23) Ключи и реляционный подход к построению модели: понятие, классификация, назначение, примеры, суть подхода.

"Ключи в реляционной модели данных — это атрибуты или наборы атрибутов, которые используются для уникальной идентификации записей. Классификация ключей:
1. **Первичный ключ**: Уникальный идентификатор записи в таблице.
2. **Внешний ключ**: Атрибут, ссылающийся на первичный ключ другой таблицы.
3. **Потенциальный ключ**: Атрибут, который может быть использован в качестве первичного ключа.
Назначение ключей — обеспечить целостность данных и установить связи между таблицами. Пример: В таблице 'Клиенты' первичным ключом может быть 'ID_Клиента', а в таблице 'Заказы' внешний ключ 'ID_Клиента' ссылается на 'ID_Клиента' в таблице 'Клиенты'.
Суть реляционного подхода заключается в организации данных в таблицы и использовании ключей для управления связями между ними."

24) Основные компоненты и типы данных системы управления базами данных.

"Основные компоненты СУБД:
1. **Система управления данными**: Программное обеспечение для управления базами данных.
2. **Хранилище данных**: Физическое место, где хранятся данные.
3. **Язык запросов**: Язык для взаимодействия с данными (например, SQL).
4. **Интерфейс пользователя**: Средства для взаимодействия пользователей с СУБД.
Типы данных в СУБД могут включать:
1. **Числовые**: INT, FLOAT, DECIMAL.
2. **Строковые**: CHAR, VARCHAR, TEXT.
3. **Дата и время**: DATE, TIME, TIMESTAMP.
4. **Логические**: BOOLEAN."

25) Системы управления базами данных: понятие, назначение, функции, классификация, отличительные особенности.

"Система управления базами данных (СУБД) — это программное обеспечение, предназначенное для создания, управления и обработки баз данных. Назначение СУБД:
1. Хранение данных.
2. Обеспечение доступа к данным.
3. Поддержка целостности и безопасности данных.
Функции СУБД включают:
1. Создание и управление базами данных.
2. Обработка запросов.
3. Резервное копирование и восстановление данных.
Классификация СУБД:
1. **Реляционные**: Используют таблицы (например, MySQL, PostgreSQL).
2. **Нереляционные**: Используют другие структуры (например, MongoDB, Cassandra).
Отличительные особенности могут включать поддержку транзакций, масштабируемость и производительность."

26) Основные компоненты и типы данных системы управления базами данных.

"Основные компоненты СУБД:
1. **Система управления данными**: Программное обеспечение для управления базами данных.
2. **Хранилище данных**: Физическое место, где хранятся данные.
3. **Язык запросов**: Язык для взаимодействия с данными (например, SQL).
4. **Интерфейс пользователя**: Средства для взаимодействия пользователей с СУБД.
Типы данных в СУБД могут включать:
1. **Числовые**: INT, FLOAT, DECIMAL.
2. **Строковые**: CHAR, VARCHAR, TEXT.
3. **Дата и время**: DATE, TIME, TIMESTAMP.
4. **Логические**: BOOLEAN."


27) Распределенные и централизованные базы данных. Архитектура файл-сервер. Архитектура клиент-сервер.


"Централизованные базы данных хранят данные на одном сервере, к которому обращаются все клиенты. Преимущества: простота управления и безопасности. Недостатки: узкое место в производительности.

Распределенные базы данных хранят данные на нескольких серверах, что позволяет улучшить производительность и доступность. Преимущества: масштабируемость и отказоустойчивость. Недостатки: сложность управления и синхронизации данных.

Архитектура файл-сервер: клиент обращается к серверу для доступа к файлам, где данные хранятся в виде файлов. Преимущества: простота, недостатки: ограниченная производительность.

Архитектура клиент-сервер: клиент отправляет запросы серверу, который обрабатывает их и возвращает результаты. Преимущества: более эффективное использование ресурсов, недостатки: сложность настройки и управления."


28) Опишите этапы жизненного цикла разработки баз данных.


"Этапы жизненного цикла разработки баз данных включают:

1. **Анализ требований**: Определение потребностей пользователей и бизнес-требований.

2. **Проектирование**: Создание концептуальной, логической и физической модели базы данных.

3. **Реализация**: Создание базы данных и ее объектов с использованием СУБД.

4. **Тестирование**: Проверка работоспособности и производительности базы данных.

5. **Внедрение**: Развертывание базы данных в рабочей среде.

6. **Поддержка и обслуживание**: Обновление и оптимизация базы данных по мере необходимости."


29) ER-диаграмма (диаграмма «сущность-связь»)? Как её строить? Какие типы связей существуют? Приведите примеры.


"ER-диаграмма — это графическое представление сущностей и их взаимосвязей в базе данных. Для ее построения:

1. Определите сущности и их атрибуты.

2. Определите связи между сущностями.

3. Нанесите сущности и связи на диаграмму.

Типы связей:

1. **Один к одному (1:1)**: Пример: 'Пользователь' и 'Профиль'.

2. **Один ко многим (1:N)**: Пример: 'Автор' и 'Книга'.

3. **Многие ко многим (M:N)**: Пример: 'Студент' и 'Курс' с промежуточной таблицей 'Запись'."


30) Как создавать ER-диаграммы для различных типов связей (один-к-одному, один-ко-многим, много-ко-многим)?


"Для создания ER-диаграмм:

1. **Один к одному (1:1)**: Соедините две сущности одной линией, указывая на уникальность каждой записи.

2. **Один ко многим (1:N)**: Соедините сущность с 'одной' стороны с сущностью 'многих' с помощью линии, добавив '1' и 'N' для обозначения.

3. **Многие ко многим (M:N)**: Создайте промежуточную сущность, которая будет связывать две другие сущности, и соедините их с ней, указывая 'M' и 'N'."


31) Что такое концептуальное, логическое и физическое проектирование базы данных? В чём заключаются отличия?


"Концептуальное проектирование: создание абстрактной модели данных, описывающей сущности и их связи без учета технических деталей.

Логическое проектирование: преобразование концептуальной модели в логическую, учитывающую конкретную СУБД, но не физические аспекты хранения данных.

Физическое проектирование: определение структуры хранения данных, индексов и других технических деталей, необходимых для реализации базы данных.

Отличия заключаются в уровне абстракции и детализации: концептуальное — высокоуровневое, логическое — средний уровень, физическое — низкий уровень."


32) Как определить функциональные зависимости в существующей базе данных?


"Функциональные зависимости определяются путем анализа атрибутов таблиц. Для этого:

1. Определите, какие атрибуты могут быть использованы для уникальной идентификации других атрибутов.

2. Проверьте, что для каждого значения одного атрибута существует только одно значение другого атрибута.

3. Используйте примеры данных для выявления зависим остей. Например, если 'ID_Клиента' уникально определяет 'Имя_Клиента', то существует функциональная зависимость: 'ID_Клиента' → 'Имя_Клиента'."


33) Определите результат выполнения запроса: SELECT * FROM Клиент


Возвращает все записи и все столбцы из таблицы 'Клиент'. Результат будет содержать полную информацию о каждом клиенте, включая все атрибуты, такие как 'ID_Клиента', 'Имя_Клиента', 'Адрес', 'Телефон' и т.д."


34) Определите результат выполнения запроса: SELECT ALL Клиент. Фирма FROM Клиент эквивалентно или нет


результат выполнения запроса SELECT ALL Клиент будет ошибкой, так как SQL не понимает, что именно вы хотите выбрать
А также они не эквивалентны, так как первый запрос некорректен.

35) Определите результат выполнения запроса: SELECT * FROM Сделка WHERE Количество>20


Возвращает все записи из таблицы 'Сделка', где значение в столбце 'Количество' больше 20. Результат будет содержать все атрибуты сделок, соответствующих этому условию." 



Обязательно для запоминания:

1) Основные понятия БД
- База данных (БД): Организованная коллекция данных.
- Информационная система (ИС): Система для обработки информации.
- Система управления базами данных (СУБД): Программное обеспечение для управления БД.

2) Элементы реляционной модели
- Отношение: Таблица в БД.
- Кортеж: Строка в таблице.
- Атрибут: Столбец в таблице.
- Первичный ключ: Уникальный идентификатор записи.
- Внешний ключ: Ссылка на первичный ключ другой таблицы.

3) Связи между отношениями
- Один к одному (1:1): Каждая запись соответствует одной записи.
- Один ко многим (1:N): Одна запись соответствует нескольким записям.
- Многие ко многим (M:N): Записи могут соответствовать нескольким записям.

4) Нормализация
- 1НФ: Атомарные значения, уникальные строки.
- 2НФ: Устранение частичных зависимостей.
- 3НФ: Устранение транзитивных зависимостей.

5) Процесс разработки БД
- Анализ требований: Определение потребностей.
- Проектирование: Создание моделей (концептуальной, логической, физической).
- Реализация: Создание БД.
- Тестирование: Проверка работоспособности.
- Внедрение: Развертывание БД.
- Поддержка: Обновление и оптимизация.

6) Язык SQL
- SELECT: Извлечение данных.
- INSERT: Добавление данных.
- UPDATE: Изменение данных.
- DELETE: Удаление данных.
- WHERE: Условия отбора.
- HAVING: Условия для агрегатных функций.

7) ER-диаграммы
- Сущность: Объект, представляющий интерес.
- Атрибут: Характеристика сущности.
- Связь: Отношение между сущностями.

8) Жизненный цикл БД
- Анализ требований: Определение потребностей.
- Проектирование: Создание моделей.
- Реализация: Создание БД.
- Тестирование: Проверка.
- Внедрение: Развертывание.
- Поддержка: Обслуживание.

9) Транзакции
- ACID: Атомарность, Согласованность, Изолированность, Долговечность.

10) Типы данных
- Числовые: INT, FLOAT.
- Строковые: CHAR, VARCHAR.
- Дата и время: DATE, TIME.
- Логические: BOOLEAN.